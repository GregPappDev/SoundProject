// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Contract
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ModifySound : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModifySound GetRootAsModifySound(ByteBuffer _bb) { return GetRootAsModifySound(_bb, new ModifySound()); }
  public static ModifySound GetRootAsModifySound(ByteBuffer _bb, ModifySound obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModifySound __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Extension { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtensionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetExtensionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetExtensionArray() { return __p.__vector_as_array<byte>(8); }
  public sbyte Data(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetDataBytes() { return __p.__vector_as_span<sbyte>(10, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public sbyte[] GetDataArray() { return __p.__vector_as_array<sbyte>(10); }

  public static Offset<Contract.ModifySound> CreateModifySound(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset extensionOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ModifySound.AddData(builder, dataOffset);
    ModifySound.AddExtension(builder, extensionOffset);
    ModifySound.AddName(builder, nameOffset);
    ModifySound.AddId(builder, id);
    return ModifySound.EndModifySound(builder);
  }

  public static void StartModifySound(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddExtension(FlatBufferBuilder builder, StringOffset extensionOffset) { builder.AddOffset(2, extensionOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(3, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Contract.ModifySound> EndModifySound(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Contract.ModifySound>(o);
  }
};


}
