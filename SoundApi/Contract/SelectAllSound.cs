// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Contract
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SelectAllSound : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SelectAllSound GetRootAsSelectAllSound(ByteBuffer _bb) { return GetRootAsSelectAllSound(_bb, new SelectAllSound()); }
  public static SelectAllSound GetRootAsSelectAllSound(ByteBuffer _bb, SelectAllSound obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SelectAllSound __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool WithBinaryData { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Contract.SelectAllSound> CreateSelectAllSound(FlatBufferBuilder builder,
      bool with_binary_data = false) {
    builder.StartTable(1);
    SelectAllSound.AddWithBinaryData(builder, with_binary_data);
    return SelectAllSound.EndSelectAllSound(builder);
  }

  public static void StartSelectAllSound(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddWithBinaryData(FlatBufferBuilder builder, bool withBinaryData) { builder.AddBool(0, withBinaryData, false); }
  public static Offset<Contract.SelectAllSound> EndSelectAllSound(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Contract.SelectAllSound>(o);
  }
};


}
