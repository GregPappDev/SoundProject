// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Contract
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SelectSoundIds : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SelectSoundIds GetRootAsSelectSoundIds(ByteBuffer _bb) { return GetRootAsSelectSoundIds(_bb, new SelectSoundIds()); }
  public static SelectSoundIds GetRootAsSelectSoundIds(ByteBuffer _bb, SelectSoundIds obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SelectSoundIds __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Ids(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIdsBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetIdsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetIdsArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<Contract.SelectSoundIds> CreateSelectSoundIds(FlatBufferBuilder builder,
      VectorOffset idsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SelectSoundIds.AddIds(builder, idsOffset);
    return SelectSoundIds.EndSelectSoundIds(builder);
  }

  public static void StartSelectSoundIds(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddIds(FlatBufferBuilder builder, VectorOffset idsOffset) { builder.AddOffset(0, idsOffset.Value, 0); }
  public static VectorOffset CreateIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Contract.SelectSoundIds> EndSelectSoundIds(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // ids
    return new Offset<Contract.SelectSoundIds>(o);
  }
};


}
